generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(cuid())

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  admin
  user
}

model User {
  id String @id @default(cuid())

  firstName             String
  lastName              String
  email                 String?                @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  role                  UserRole               @default(user)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts  Account[]
  addresses UserAddress[]
  reviews   Review[]
}

model TwoFactorToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model UserAddress {
  id         Int     @id @default(autoincrement())
  street1    String
  street2    String?
  street3    String?
  postalCode String
  state      String
  country    String

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Store {
  id Int @id @default(autoincrement())

  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items  StoreItem[]
  orders Order[]
}

model Billboard {
  id Int @id @default(autoincrement())

  imageUrl    String
  label       String
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categories Category[]
}

model Category {
  id Int @id @default(autoincrement())

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboardId Int?
  billboard   Billboard? @relation(fields: [billboardId], references: [id])

  categoryBrands CategoryBrand[]
  subcategories  Subcategory[]
  products       Product[]
}

model Brand {
  id Int @id @default(autoincrement())

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageUrl  String?

  categoryBrands CategoryBrand[]
  series         Series[]
  products       Product[]
  finishes       Finish[]
}

model CategoryBrand {
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  brandId    Int
  brand      Brand    @relation(fields: [brandId], references: [id])

  @@id([categoryId, brandId])
}

model Series {
  id Int @id @default(autoincrement())

  name String

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id])

  products Product[]
}

model Subcategory {
  id Int @id @default(autoincrement())

  name String

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  products       Product[]
  specifications Specification[]
}

model Product {
  id Int @id @default(autoincrement())

  name        String
  sku         String
  model       String?
  description String
  videoUrl    String?

  categoryId    Int
  category      Category    @relation(fields: [categoryId], references: [id])
  subcategoryId Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  brandId       Int
  brand         Brand       @relation(fields: [brandId], references: [id])
  seriesId      Int?
  series        Series?     @relation(fields: [seriesId], references: [id])

  reviews        Review[]
  specifications ProductSpecification[]
}

model Finish {
  id Int @id @default(autoincrement())

  name  String
  value String

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id])

  productItems ProductItem[]
}

model Specification {
  id Int @id @default(autoincrement())

  key String

  subcategoryId Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  products ProductSpecification[]
}

model ProductItem {
  id Int @id @default(autoincrement())

  price Int

  finishId Int?
  finish   Finish? @relation(fields: [finishId], references: [id])

  images     ProductItemImage[]
  storeItems StoreItem[]
}

model ProductItemImage {
  id Int @id @default(autoincrement())

  imageUrl String

  productItemId Int
  productItem   ProductItem @relation(fields: [productItemId], references: [id])

  @@index([productItemId])
}

model ProductSpecification {
  productId       Int
  product         Product       @relation(fields: [productId], references: [id])
  specificationId Int
  specification   Specification @relation(fields: [specificationId], references: [id])

  value String

  @@id([productId, specificationId])
}

model StoreItem {
  id Int @id @default(autoincrement())

  stock           Int
  discountedPrice Int?

  productItemId Int
  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  storeId       Int
  store         Store       @relation(fields: [storeId], references: [id])
}

model Order {
  id String @id @default(cuid())

  storeId Int
  store   Store @relation(fields: [storeId], references: [id])

  timeline OrderTimeline[]
}

model OrderTimeline {
  id Int @id @default(autoincrement())

  status    OrderStatus
  createdAt DateTime    @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  processing
  fulfilled
  cancelled
}

model Review {
  id Int @id @default(autoincrement())

  rating  Int
  comment String?

  productId Int
  product   Product @relation(fields: [productId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}
