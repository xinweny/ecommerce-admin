generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(cuid())

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  admin
  user
}

model User {
  id String @id @default(cuid())

  firstName             String
  lastName              String
  email                 String?
  password              String?
  emailVerified         DateTime?
  image                 String?
  role                  UserRole               @default(user)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts Account[]
  orders   Order[]
  reviews  Review[]

  @@unique([email, role])
}

model TwoFactorToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Billboard {
  id Int @id @default(autoincrement())

  imageUrl    String
  label       String   @unique
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categories Category[]
}

model Category {
  id Int @id @default(autoincrement())

  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboardId Int?
  billboard   Billboard? @relation(fields: [billboardId], references: [id], onDelete: SetNull)

  subcategories Subcategory[]
  products      Product[]
}

model Brand {
  id Int @id @default(autoincrement())

  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageUrl  String?

  series   Series[]
  products Product[]
}

model Series {
  id Int @id @default(autoincrement())

  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  products Product[]
}

model Subcategory {
  id Int @id @default(autoincrement())

  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  products       Product[]
  specifications Specification[]
}

model Product {
  id Int @id @default(autoincrement())

  name        String
  model       String   @unique
  description String?
  videoUrl    String?
  slug        String   @unique
  isArchived  Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  categoryId    Int
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: SetDefault)
  subcategoryId Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: SetDefault)
  brandId       Int
  brand         Brand       @relation(fields: [brandId], references: [id], onDelete: SetDefault)
  seriesId      Int?
  series        Series?     @relation(fields: [seriesId], references: [id], onDelete: SetNull)

  productItems   ProductItem[]
  orderItems     OrderItem[]
  reviews        Review[]
  specifications ProductSpecification[]
}

model ProductItem {
  id Int @id @default(autoincrement())

  name       String
  price      Int
  sku        String   @unique
  stock      Int
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  images     ProductItemImage[]
  orderItems OrderItem[]
}

model ProductItemImage {
  id Int @id @default(autoincrement())

  imageUrl String

  productItemId Int
  productItem   ProductItem @relation(fields: [productItemId], references: [id], onDelete: Cascade)

  @@index([productItemId])
}

model Specification {
  id Int @id @default(autoincrement())

  key String

  subcategoryId Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  products ProductSpecification[]
}

model ProductSpecification {
  productId       Int
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  specificationId Int
  specification   Specification @relation(fields: [specificationId], references: [id], onDelete: Cascade)

  value String

  @@id([productId, specificationId])
}

model Order {
  id String @id @default(cuid())

  orderNumber   String      @unique
  customerName  String
  addressLine1  String
  addressLine2  String?
  city          String
  postalCode    String
  state         String
  country       String
  email         String
  phoneNumber   String
  total         Int
  currentStatus OrderStatus @default(processing)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  timeline   OrderTimeline[]
  orderItems OrderItem[]
}

model OrderItem {
  id String @id @default(cuid())

  quantity Int
  price    Int

  orderId       String
  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     Int
  product       Product     @relation(fields: [productId], references: [id], onDelete: SetDefault)
  productItemId Int
  productItem   ProductItem @relation(fields: [productItemId], references: [id], onDelete: SetDefault)
}

model OrderTimeline {
  id Int @id @default(autoincrement())

  status    OrderStatus
  createdAt DateTime    @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  processing
  shipped
  fulfilled
  cancelled
}

model Review {
  id Int @id @default(autoincrement())

  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id Int @id @default(autoincrement())

  name       String
  line1      String
  line2      String?
  line3      String?
  city       String
  postalCode String
  state      String
  country    String
}
